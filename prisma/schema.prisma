generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
  binaryTargets = ["native", "windows"]
  engineType      = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id             String    @id @default(uuid())
  username           String @unique
  email          String    @unique
  emailVerified  DateTime?
  phone String? @unique
  country        String
  password      String
  interests      String[]  @default([])
  image          String?
  isPremium      Boolean   @default(false)
  createdAt      DateTime  @default(now())
  hashedPassword String?
  accounts      Account[]
  sessions      Session[]
  questions     Question[]
  replies       Reply[]
  videoReviews  Review[]
}

model Question {
  id        String   @id @default(cuid())
  content   String
  categories String[]
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  likes     Int      @default(0)
  dislikes  Int      @default(0)
  showName  Boolean  @default(false)
  country   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  replies   Reply[]

  @@index([userId])
}

model Reply {
  id         String   @id @default(cuid())
  content    String
  questionId String
  question   Question @relation(fields: [questionId], references: [id])
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  likes      Int      @default(0)
  dislikes   Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([questionId])
  @@index([userId])
}


model Review {
  id          String   @id @default(cuid())
  title       String
  videoUrl    String?  // Optional URL to the uploaded video
  imageUrl    String?  // Optional URL to the uploaded image
  thumbnailUrl String? // Optional thumbnail URL
  category    String
  description String
  rating      Int
  views       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  agreements  Int      @default(0) 
}
